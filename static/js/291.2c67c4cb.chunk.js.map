{"version":3,"file":"static/js/291.2c67c4cb.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContackList/ContactList.styled.js","components/ContackList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","../node_modules/nanoid/index.browser.js","pages/contacts.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Form = styled.form`\nborder: solid 1px black;\npadding: 20px;\nwidth: 180px;\nborder-radius: 4px;\nbutton {\n    display: block;\n    margin-top: 20px;\n}\n`;","import styled from \"@emotion/styled\";\n\nexport const ContactListItem = styled.li`\np {\n    display: inline-block;\n    margin-right: 20px;\n}\n`;","import PropTypes from 'prop-types';\nimport { ContactListItem } from './ContactList.styled';\n\nexport default function ContactList({contacts, onDeleteContact}) {\n  return (                                                             \n  <ul>\n    {contacts.map(({id, name, number}) => (\n        <ContactListItem key={id}>\n            <p>{name} {number}</p>\n            <button onClick={() => onDeleteContact(id)}>Delete</button>\n        </ContactListItem>\n    ))}\n  </ul>\n)};\n\nContactList.propTypes = {\n  contacts: PropTypes.array,\n  onDeleteContact: PropTypes.func,\n};","import {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from './ContactForm.styled';\n\nexport default function ContactForm({onSubmitForm}) {\n  const[name,setName] = useState('');\n  const[number,setNumber] = useState('');\n    \n  const handleOnChange = e => {\n    const {value} = e.currentTarget\n    if(e.currentTarget.name === 'name') {\n      setName(value)\n    }\n    if(e.currentTarget.name === 'number') {\n      setNumber(value)\n    }        \n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const data = {name: `${name}`, number: `${number}`}\n    onSubmitForm(data)\n    reset()\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('')\n  }\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <label htmlFor={name}>Name\n        <input \n          type=\"text\"\n          name=\"name\" \n          value={name}\n          pattern=\"^[a-zA-Za-яА-Я]+(([' -][a-zA-Za-яА-Я ])?[a-zA-Za-яА-Я]*)*$\" \n          title=\"Name may contain onle letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Bats de Castelmore d`Artagnan\" \n          required\n          onChange={handleOnChange}\n          id={name}\n        />\n        </label>\n      <label htmlFor={number}>Number\n        <input \n          type=\"tel\"\n          name=\"number\" \n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\" \n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\" \n          required\n          onChange={handleOnChange}\n          id={number}\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </Form>\n  )   \n}\n\nContactForm.propTypes = {\n  onSubmitForm: PropTypes.func,\n};","import styled from \"@emotion/styled\";\n\nexport const FilterInput = styled.input`\ndisplay: block;\nmargin-top: 8px;\n}\n`;","import PropTypes from 'prop-types';\nimport { FilterInput } from \"./Filter.styled\";\n\nexport default function Filter({value, onChange}) {\n    return(\n    <label>Find contacts by name\n    <FilterInput type=\"text\" value={value} onChange={onChange}/>\n    </label>\n    )\n}\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import {useEffect, useState, Suspense} from 'react';\nimport ContactList from '../components/ContackList/ContactList'\nimport ContactForm from '../components/ContactForm/ContactForm'\nimport Filter from '../components/Filter/Filter'\nimport { Outlet } from \"react-router-dom\"\nimport { useSelector} from 'react-redux';\nimport { nanoid } from 'nanoid';\n\nconst CONTACT_KEY = 'Contact key'\nconst localContacts = JSON.parse(localStorage.getItem(CONTACT_KEY))\n\nexport default function Contacts() {\n  const [contacts, setContacts] = useState(localContacts ?? \n    [ {id: 'id-1', name: 'Rozie Simpson', number: '459-12-56'},\n      {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n      {id: 'id-3', name: 'Eden Klements', number: '645-17-79'},\n      {id: 'id-4', name: 'Annie Copelsnd', number: '227-91-26'},\n    ]\n  );\n  const [filter, setFilter] = useState('');\n  const isLogin = useSelector(state => state.contacts.isLogin);\n  const error = useSelector(state => state.contacts.error);\n\n  useEffect(() => {\n    localStorage.setItem(CONTACT_KEY, JSON.stringify(contacts));\n  }, [contacts]);\n\n  const deleteContact = (contactId) => {\n    setContacts(prevState => prevState.filter(contact => contact.id !== contactId),\n    );\n  };\n\n  const addContact = (data) => {\n    const contact = {\n      id: nanoid(),\n      name: data.name,\n      number: data.number,\n    };\n\n    const filterResult = contacts.find(prevContact =>\n      prevContact.name.toLowerCase().trim() ===\n      contact.name.toLowerCase().trim() ||\n      prevContact.number.trim() === contact.number.trim()\n    )\n\n    if(filterResult)\n    alert(`${contact.name}: is already in contacts`)\n    else setContacts(prevState => {\n      return [contact, ...prevState];\n    });\n  }\n\n  const onFilter = e => {\n    const prevState = e.currentTarget.value\n    setFilter(prevState)\n  }\n\n  const visibleContacts = () => {\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n  }\n\n  return (isLogin && !error &&\n  <>\n    <div\n      style={{\n        height: '100vh',\n        display: 'block',\n        marginLeft: '40px',\n        fontSize: 16,\n        color: '#010101'\n      }}\n    >\n      <h1>Phonebook</h1>\n      <ContactForm onSubmitForm={addContact}/>\n      <h2>Contacts</h2>\n      <Filter value={filter} onChange={onFilter}/>\n      <ContactList contacts={visibleContacts()} onDeleteContact={deleteContact}/>\n    </div>\n    <Suspense fallback={<div>Loading...</div>}>\n        <Outlet/>\n    </Suspense>\n  </>\n)};"],"names":["Form","styled","ContactListItem","ContactList","contacts","onDeleteContact","map","id","name","number","onClick","ContactForm","onSubmitForm","useState","setName","setNumber","handleOnChange","e","value","currentTarget","reset","onSubmit","preventDefault","data","htmlFor","type","pattern","title","required","onChange","FilterInput","Filter","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","CONTACT_KEY","localContacts","JSON","parse","localStorage","getItem","Contacts","setContacts","filter","setFilter","isLogin","useSelector","state","error","useEffect","setItem","stringify","style","height","display","marginLeft","fontSize","color","contact","find","prevContact","toLowerCase","trim","alert","prevState","includes","contactId","Suspense","fallback"],"sourceRoot":""}